from datetime import timedelta
import os
import json
"""
Django settings for project project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""
USE_DUMMY_SMS = True


from pathlib import Path

from google.oauth2 import service_account

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

GS_BUCKET_NAME = 'farm-freight'
# Define the path to your service account key file

# Check if using environment variable or file path
if 'GOOGLE_CREDENTIALS_JSON' in os.environ:
    # Create credentials from environment variable
    service_account_info = json.loads(os.environ['GOOGLE_CREDENTIALS_JSON'])
    GS_CREDENTIALS = service_account.Credentials.from_service_account_info(service_account_info)
else:
    # Fallback to file path (for local development)
    GOOGLE_APPLICATION_CREDENTIALS = os.path.join(BASE_DIR, '/home/abright/Desktop/KEYS/fresh-fusion-456617-s8-e919b86cfbd8.json')
    GS_CREDENTIALS = service_account.Credentials.from_service_account_file(GOOGLE_APPLICATION_CREDENTIALS)

# Gmail settings
GMAIL_SERVICE_ACCOUNT_FILE = '/home/abright/Desktop/KEYS/fresh-fusion-456617-s8-4b4bfbb6175c.json'
GMAIL_USER_EMAIL = 'l@abrightforge.com'
API_ENDPOINT = 'http://127.0.0.01/api/receive-email/'
SPECIFIC_SENDER = 'googlecloud@google.com'

# APScheduler config
APSCHEDULER_DATETIME_FORMAT = "N j, Y, f:s a"
APSCHEDULER_RUN_NOW_TIMEOUT = 25

TWILIO_ACCOUNT_SID = os.getenv("TWILIO_ACCOUNT_SID")
TWILIO_AUTH_TOKEN = os.getenv("TWILIO_AUTH_TOKEN")
TWILIO_PHONE_NUMBER = os.getenv("TWILIO_PHONE_NUMBER")

# Create credentials object
#GS_CREDENTIALS = service_account.Credentials.from_service_account_file(GOOGLE_APPLICATION_CREDENTIALS)

# Define the STORAGES setting
STORAGES = {
    'default': {
        'BACKEND': 'storages.backends.gcloud.GoogleCloudStorage',
        'OPTIONS': {
            'bucket_name': 'farm-freight',
            'credentials': GS_CREDENTIALS,
        },
    },
    'staticfiles': {
        'BACKEND': 'storages.backends.gcloud.GoogleCloudStorage',
        'OPTIONS': {
            'bucket_name': 'farm-freight',
            'credentials': GS_CREDENTIALS,
        },
    },
}

DELIVERY_LINK_DOMAIN = "https://backend-production-5f3d.up.railway.app"
# Define MEDIA_URL and STATIC_URL
MEDIA_URL = f'https://storage.googleapis.com/farm-freight/media/'
STATIC_URL = f'https://storage.googleapis.com/farm-freight/static/'

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-ck$4%s+h=j@ll&4!&)*%oz2=)e-vp%dmd0-82a&98y=p!6bt6@'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*', '.up.railway.app']

CORS_ALLOWED_ORIGINS = [
    "https://frontend-production-953d.up.railway.app",
    "https://backend-production-5f3d.up.railway.app",
    "http://localhost:3000"
]


STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'api',
    'project',
    'accounts',
    'stores',
    'assignments',
    'orders',
    'products',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    'django_extensions',
    'corsheaders',
    "storages",
    'messaging',
    'django_apscheduler',
    'email_processor'
]

REST_FRAMEWORK = {
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,  # Default page size
    'DEFAULT_FILTER_BACKENDS': [
        'django_filters.rest_framework.DjangoFilterBackend',
        'rest_framework.filters.SearchFilter',
        'rest_framework.filters.OrderingFilter',
    ],
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework_simplejwt.authentication.JWTAuthentication',  # Add this line
        'rest_framework.authentication.TokenAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # Optional - to customize pagination response format
    'DEFAULT_PAGINATION_RESPONSE': {
        'count': 'count',
        'next': 'next',
        'previous': 'previous',
        'results': 'results',
    }
}

SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME':timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME':timedelta(days=1),
    'ROTATE_REFRESH_TOKENS':False,
    'BLACKLIST_AFTER_ROTATION':True,
    #'USER_ID_FIELD':'email',
    #'USER_ID_CLAIM':'email',
}

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware'
]

#CORS_ALLOWED_ORIGINS = [
#    "http://localhost:3000",
#    "http://127.0.0.1:3000",
#]

CSRF_TRUSTED_ORIGINS = [
    "https://backend-production-5f3d.up.railway.app",   
    "https://frontend-production-953d.up.railway.app",
]

CORS_ALLOW_CREDENTIALS = True  # If you need to send cookies

# If you need to allow specific HTTP methods
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]

# If you need to allow specific headers
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]


ROOT_URLCONF = 'project.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'project.wsgi.application'

# DATABASE
if os.environ.get('RAILWAY_ENVIRONMENT') == 'production':
    # PostgreSQL configuration (Production on Railway)
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql',
            'NAME': os.environ.get('PGDATABASE'),
            'USER': os.environ.get('PGUSER'),
            'PASSWORD': os.environ.get('PGPASSWORD'),
            'HOST': os.environ.get('PGHOST'),
            'PORT': os.environ.get('PGPORT'),
        }
    }
    SITE_URL = 'https://backend-production-xyz.up.railway.app'
else:
    # SQLite configuration (Local Development)
    BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
        }
    }
    SITE_URL = 'http://localhost:8000'



#DATABASES = {
#    'default': {
#        'ENGINE': 'django.db.backends.postgresql',
#        'NAME': 'test',
#        'USER': 'db_owner',
#        'PASSWORD': 'iKvzk2fQYnx3',
#        'HOST': 'ep-wispy-night-a5ew5dym.us-east-2.aws.neon.tech',  # Example: ep-silent-water-123456.us-east-2.aws.neon.tech
#        'PORT': '5432',  # Default PostgreSQL port
#        'OPTIONS': {
#            'sslmode': 'require',  # Ensures a secure connection
#        },
#    }
#}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = 'accounts.User'

if os.environ.get('RAILWAY_ENVIRONMENT') == 'production':
    SITE_URL = 'fullstack-production-7ab8.up.railway.app'
else:
    SITE_URL = 'http://localhost:8000'

SITE_NAME = 'Forge'#SITE_NAME = 'Forge'

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'


# Configure logging to capture email sending errors
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': 'django-errors.log',
            'formatter': 'verbose',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'api': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

print("🔥 GCS settings.py loaded")
